const{WebhookClient,MessageEmbed}=require('discord.js');
const{botGuild,prefix,noiceboardMinValue}=require('./config.json');
const{voice,text}=require("./channels.json");
const{log}=require('./webhooks.json');
const{noice2}=require('./emojis.json');
const{noiceboard}=require('./colors.json');
const{isUri}=require('valid-url');
exports.updateMemberSize=client=>{const guild=client.guilds.cache.get(botGuild);const allMembersChannel=client.channels.cache.get(voice.allMembers);const membersChannel=client.channels.cache.get(voice.members);const botsChannel=client.channels.cache.get(voice.bots);const members=guild.members.cache.filter(member=>!member.user.bot).size;allMembersChannel.setName(`All members: ${guild.memberCount}`);membersChannel.setName(`Members: ${members}`);botsChannel.setName(`Bots: ${guild.memberCount - members}`);}
exports.updateGuildAmount=client=>{const suffixes=["k","m","b"];const activities=["PLAYING","STREAMING","LISTENING","WATCHING"];const activity=activities[Math.floor(Math.random()*activities.length)];const url="http://twitch.tv/";let serverAmout=client.guilds.cache.array().length;let suffixUsed="";for(let suffix in suffixes){if (serverAmout>1000){serverAmout/=1000;suffixUsed=suffix;} else break;}serverAmout=`${serverAmout}${suffixUsed}`;if (activity=="PLAYING"||activity=="STREAMING"){serverAmout=`with ${serverAmout}`;}client.user.setActivity(`${serverAmout} guilds | ${prefix}help`,{type:activity,url:url});}
exports.sendGuildLog=(name,avatar,message)=>{const webhook=new WebhookClient(log.id,log.token);webhook.edit({name:name,avatar:avatar}).then(()=>{webhook.send(message);});}
exports.createEmbed=(options={color:"",title:"",url:"",author:{name:"",icon:"",url:""},description:"",thumbnail:"",fields:[{name:"",value:"",inline:false}],image:"",timestamp:false,footer:{text:"",icon:""}})=>{const embedMsg=new MessageEmbed();return this.editEmbed(embedMsg,options);}
exports.editEmbed=(embedMsg,options={color:"",title:"",url:"",author:{name:"",icon:"",url:""},description:"",thumbnail:"",fields:[{name:"",value:"",inline:false}],image:"",timestamp:false,footer:{text:"",icon:""}})=>{if(options.color)embedMsg.setColor(options.color);if(options.title)embedMsg.setTitle(options.title);if(options.url)embedMsg.setURL(options.url);if(options.author?.name)embedMsg.setAuthor(options.author.name, options.author.icon, options.author.url);if(options.description)embedMsg.setDescription(options.description);if(options.thumbnail)embedMsg.setThumbnail(options.thumbnail);for(let field of options.fields)if(field.name && field.value)embedMsg.addField(field.name, field.value, field.inline);if(options.image)embedMsg.setImage(options.image);if(options.timestamp)embedMsg.setTimestamp();if(options.footer?.text)embedMsg.setFooter(options.footer.text, options.footer.icon);return embedMsg;}
exports.checkNoiceBoard=messageReaction=>{const guild=messageReaction.message.guild;const member=messageReaction.message.member;const channel=guild.channels.cache.get(text.noiceboard);const emoji=guild.emojis.cache.get(noice2);const embedMsg=this.createEmbed(noiceboard,null,null,{name:member.displayName,icon:member.user.displayAvatarURL()},messageReaction.message.content,null,[{name:"Message",value:`[Jump to message](${messageReaction.message.url})`}],null,true,{text:messageReaction.message.id});const message=channel.messages.cache.find(m=>m.embeds[0].footer.text===messageReaction.message.id);if(messageReaction.count>=noiceboardMinValue){const messageText=`${emoji} ${messageReaction.count} ${messageReaction.message.channel}`;if (!message){return channel.send(messageText,embedMsg);}message.edit(messageText,embedMsg);}else{if(!message)return;message.delete();}}
exports.sendEmbed=(embed,message)=>{if(!message.client.canSendEmbeds)embed=embed.description;return message.channel.send(embed);}
exports.sendEmbedWithChannel=(embed,client,channel)=>{if(!client.canSendEmbeds)embed=embed.description;channel.send(embed);}
exports.addRole=(member,role)=>member.roles.add(role);
exports.removeRole=(member,role)=>member.roles.remove(role);
exports.hasRole=(member,role)=>{return member.roles.cache.get(role);}
exports.randomInt=(min,max)=>{return Math.floor(Math.random()*max-min)+min;}
exports.getUser=(message,args,client)=>{let user = null;if(message.mentions.users.first()){user=message.mentions.users.first();}else if(!isNaN(parseInt(args[0]))){user=client.users.cache.get(args[0]);}else{let username=args.toString().replace(",", " ");user=client.users.cache.find(u=>u.username.toLowerCase().includes(username.toLowerCase()));}return user;}
exports.inBotGuild=(client,userId)=>{if(!client.guild.members.cache.get(userId))return false;return true;}
exports.wait=ms=>new Promise(resolve => setTimeout(resolve, ms));
exports.isImage=url=>{return isUri(url)&&/\.(gif|jpe?g|tiff?|png|webp|bmp)$/i.test(url);}
